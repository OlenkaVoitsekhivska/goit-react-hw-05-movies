{"version":3,"file":"static/js/231.6ff00e45.chunk.js","mappings":"2PAKe,SAASA,IACtB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAsCF,EAAAA,EAAAA,UAAS,IAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEIC,GAAWC,EAAAA,EAAAA,MAyCf,OAxBAC,EAAAA,EAAAA,YAAU,WACM,KAAVX,GAGAI,GACFC,GAAY,KAEb,CAACL,EAAOI,KAEXO,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAQL,EAAaM,IAAI,SACzBD,IACFE,EAAAA,EAAAA,IAAqBF,GAAOG,MAAK,SAAAC,GAC/B,GAAmB,IAAfA,EAAIC,OAGN,OAFAC,EAAAA,GAAAA,MAAY,iDACZT,EAAS,MAGXN,EAAea,GACff,EAAS,SAGZ,CAACQ,EAAUF,KAGZ,iCACE,kBAAMY,OAAO,GAAGC,SArCC,SAAAC,GACnBhB,GAAY,GACZgB,EAAMC,iBAEe,KAAjBtB,EAAMuB,OAIVf,EAAgB,CAAEI,MAAOZ,IAHvBkB,EAAAA,GAAAA,MAAY,4BAgCZ,WACE,kBAAOM,KAAK,OAAOC,SA1CC,SAAAC,GACxBzB,EAASyB,EAAEC,cAAcC,MAAMC,gBAyCqBD,MAAO5B,KACvD,mBAAQwB,KAAK,SAASM,GAAG,YAAzB,uBAID5B,GACCA,EAAY6B,KAAI,SAAAC,GACd,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAKF,IAAlB,SAAyBE,EAAKE,kBADvBF,EAAKF,Y,yMC7DpBK,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEoBC,GAAAA,CAAM,qBAAsB,CACjDC,OAAQ,CACNC,QAASJ,EACTK,KAAM,KALP,uBAEKC,EAFL,EAEKA,KAFL,kBAQIA,EAAKC,SART,gCAUHC,QAAQC,IAAR,MAVG,gFAcA,SAAe9B,EAAtB,+CAAO,OAAP,oBAAO,WAAoC+B,GAApC,kGAEoBR,GAAAA,CAAM,eAAgB,CAC3CC,OAAQ,CACNC,QAASJ,EACTvB,MAAM,GAAD,OAAKiC,MALX,uBAEKJ,EAFL,EAEKA,KAFL,kBAQIA,EAAKC,SART,gCAUHC,QAAQC,IAAR,MAVG,gFAcA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,kGAGoBV,GAAAA,CAAM,SAAD,OAAUU,GAAW,CAE/CT,OAAQ,CACNC,QAASJ,KANV,uBAGKM,EAHL,EAGKA,KAHL,kBASIA,GATJ,gCAWHE,QAAQC,IAAR,MAXG,gFAeA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,kGAEoBV,GAAAA,CAAM,SAAD,OAAUU,EAAV,YAA6B,CAEvDT,OAAQ,CACNC,QAASJ,KALV,uBAEKM,EAFL,EAEKA,KAFL,kBAQIA,GARJ,gCAUHE,QAAQC,IAAR,MAVG,gFAcA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAyBF,GAAzB,kGAEoBV,GAAAA,CAAM,SAAD,OAAUU,EAAV,YAA6B,CAEvDT,OAAQ,CACNC,QAASJ,KALV,uBAEKM,EAFL,EAEKA,KAFL,kBAQIA,GARJ,gCAUHE,QAAQC,IAAR,MAVG,gFA3DPP,IAAAA,SAAAA,QAAyB","sources":["components/Navigation/MoviesPage/MoviesPage.jsx","components/ServiceApi/ServiceApi.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { fetchMoviesByKeyword } from 'components/ServiceApi/ServiceApi';\nimport { Link, useSearchParams, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nexport default function MoviesPage() {\n  const [input, setInput] = useState('');\n  const [moviesByKey, setMoviesByKey] = useState([]);\n  const [isActive, setIsActive] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  let navigate = useNavigate();\n\n  const handleInputChange = e => {\n    setInput(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    setIsActive(true);\n    event.preventDefault();\n\n    if (input.trim() === '') {\n      toast.error('Enter your search query');\n      return;\n    }\n    setSearchParams({ query: input });\n  };\n\n  useEffect(() => {\n    if (input === '') {\n      return;\n    }\n    if (isActive) {\n      setIsActive(false);\n    }\n  }, [input, isActive]);\n\n  useEffect(() => {\n    let query = searchParams.get('query');\n    if (query) {\n      fetchMoviesByKeyword(query).then(res => {\n        if (res.length === 0) {\n          toast.error(\"Didn't find anything matching your query\");\n          navigate('./');\n          return;\n        }\n        setMoviesByKey(res);\n        setInput(''); //clearing input after data's been set\n      });\n    }\n  }, [navigate, searchParams]);\n\n  return (\n    <>\n      <form action=\"\" onSubmit={handleSubmit}>\n        <input type=\"text\" onChange={handleInputChange} value={input} />\n        <button type=\"submit\" id=\"submitBtn\">\n          Search\n        </button>\n      </form>\n      {moviesByKey &&\n        moviesByKey.map(item => {\n          return (\n            <li key={item.id}>\n              <Link to={`${item.id}`}>{item.original_title}</Link>\n            </li>\n          );\n        })}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = '7a92417a5af1e8667d171d8c5ef3af4e';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport async function fetchTrending() {\n  try {\n    const { data } = await axios('trending/movie/day', {\n      params: {\n        api_key: API_KEY,\n        page: 1,\n      },\n    });\n    return data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMoviesByKeyword(searchQuery) {\n  try {\n    const { data } = await axios('search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: `${searchQuery}`,\n      },\n    });\n    return data.results; //returns an OBJECT. e.g.{page: 1, results: Array(20), total_pages: 8, total_results: 147}\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchMovieById(movieId) {\n  //will throw an error if title \"undefined\";\n  try {\n    const { data } = await axios(`movie/${movieId}`, {\n      //for this to work make sure this.searchQuery type is number!!!\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchReviews(movieId) {\n  try {\n    const { data } = await axios(`movie/${movieId}/reviews`, {\n      //for this to work make sure this.searchQuery type is number!!!\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchCast(movieId) {\n  try {\n    const { data } = await axios(`movie/${movieId}/credits`, {\n      //for this to work make sure this.searchQuery type is number!!!\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["MoviesPage","useState","input","setInput","moviesByKey","setMoviesByKey","isActive","setIsActive","useSearchParams","searchParams","setSearchParams","navigate","useNavigate","useEffect","query","get","fetchMoviesByKeyword","then","res","length","toast","action","onSubmit","event","preventDefault","trim","type","onChange","e","currentTarget","value","toLowerCase","id","map","item","to","original_title","API_KEY","fetchTrending","axios","params","api_key","page","data","results","console","log","searchQuery","fetchMovieById","movieId","fetchReviews","fetchCast"],"sourceRoot":""}